Técnicas de css

Reset padrão:

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

Hierarquia de níveis de especificação:

    header.header1 > p { /*Altera somente o parágrafo que está dentro do header*/
        background-color: blueviolet;
    }

    Se juntar o elemento com a classe, o nível de especificação fica maior

    Quando usamos o !important, o elemento que está com a anotação, tem mais especificação

Display:

Divs, p... tem display block, ou seja, joga para baixo
Span, a... tem display inline. ou seja, sempre vai para o lado
Inline-block: Sempre fica na masma linha, se tiver espaço. Se não, cai para baixo

Para trabalhar com porcentagem, usamos a seguinte técnica:

    html, body {
        height: 100%;
    }

    .el1 {
        display: inline-block;
        width: 50%;
        height: 40%;
        background-color: blue;
        border: 10px solid #f5e;
    }

Alinhamento vertical: vertical-align: middle;

Tamanho máximo e mínimo:

    .one {
        width: 100%;
        max-width: 300px;

        height: 4%;
        min-height: 80px;
        
        background: green;
    }

Espaçamento externo e interno:

Margins e paddings (os parâmetros funcionam com os dois):

Individuais:

    margin-top: 20px;
    margin-right: 50px;
    margin-bottom: 50px;

Com 4 valores:

    margin: topo direita baixo esquerda;

Com 2 valores:

    margin cima/baixo direita/esquerda;

Overflow:

    .pai {
        width: 100px;
        height: 100px;
        background: green;
        overflow-y: auto;
        overflow-X: hidden;
    }

    .filho /*dentro da div pai*/ {
        width: 100px;
        height: 200px;
        background-color: red;
    }

Background-image:

    .background {
        width: 100%;
        height: 300px;
        background-color: grey;
        background-image: url('minha-imagem.jpg');
    }

Ajustando imagem:

    background-size: 100% 100%; /*Força a imagem a se estender por completo*/
    background-size: cover; /*Faz com que a imagem se adapte ao tamanho da div, mas pode ainda sim ter cortes*/
    background-size: contain; /*Tenta adaptar a imagem com o tamanho, sem distorcer, mas o que não der, repete*/

    background-position: center; /*Imagem ajustada ao centro*/

    background-position: left; /*Imagem ajustada à esquerda*/
    background-position: left top; /*Imagem ajustada à esquerda e em cima*/
    background-position: 30px 70px;

    background-repeat: no-repeat; /*Para evitar repatição*/
     background-repeat: repeat-x; /*Só em um eixo*/

Uso do ajuste:

    background-size: contain; /*Tenta adaptar a imagem com o tamanho, sem distorcer, mas o que não der, repete*/
    background-position: center;
    background-repeat: no-repeat;
    
    A imagem fica alinhada ao centro da div, e o que não preencher, fica com uma borda
    Usado geralmente na responsividade

Fontes:

    p {
        font-family: 'Courier New', Courier, monospace;
        font-size: 30px;
        font-weight: bold; /*No quesito de espessura*/
        font-style: italic;
    }

Seletor *: 

    Quando quero me referir a todos os elementos, sejam todos mesmo ou todos dentro de um elemento, como uma div por exemplo

    div * {
        color: aqua;
    }

    ou:

    div > * { /*Pega estritatente o que tá dentro da div*/
        color: aqua;
    }

Posições: Position static (padrão)

Position relative (Relativa à posição atual do elemento): 

    .box {
        position: relative; /*Pega exatamente onde o elemento está. Quando uso isso, liberam-se essas propriedades*/
        left: 30px;
        right: 30px;
        top: 30px;
        bottom: 30px;


        width: 500px;
        height: 500px;
        background-color: green;
    }

Position absolute:

    .box {
        position: absolute; /*Posição inicial*/
        left: 30px;
        top: 30px;
        width: 500px;
        height: 500px;
        background-color: green;
    }

Importante:

.box {
        position: relative;
        left: 200px;

        width: 500px;
        height: 500px;
        background-color: green;
    }

    .box p {
        position: absolute; /*A posição absoluta de um filho é a posição do pai*/
        left: 0px;
        top: 0px;

        color: aliceblue;
    }

Bordas:

Opção 1:
        
    border-style: solid;
    border-width: 1px;
    border-color: aqua;

Opção 2:

    border: 20px solid black;
    border: 20px dashed black; /*tracejado*/

Opção 3: Em lugares específicos:

    border-left: 20px solid red;

Opacidade e borda arredondada:

    .box {
        width: 100%;
        height: 400px;
        position: relative;
    }

    .overlay {
        position: absolute;
        left: 0;
        top: 0;

        width: 100%;
        height: 100%;
        background-color: grey;

        opacity: 0.4; /*Vai de 0 a 1*/
    }

    .box img {
        width: 100%;
        height: 100%;

        border-radius: 30px;
        border-top-right-radius: 65px;
    }

Transform e técnica de centralização:

    .box {
        width: 500px;
        height: 500px;
        background: gray;

        position: relative;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

Mais propriedades do transform:

    .box {
        width: 500px;
        height: 500px;
        background: gray;

        position: relative;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(1.3, 1.3) /*Dá um zoom*/ rotate(45deg) /*Rotaciona 35 graus*/;
        border-radius: 32px;
    }

Outra técnica de centralização (responsiva): 

    .container {
        margin: 0 auto;
        max-width: 1200px;
        width: 100%;
        padding: 0 2%;
    }

Flutuação:

    .logo {
        float: left; /*Não cria nenhum espaçamento extra*/
    }

    nav {
        float: right; 
    }

    ul {
        list-style-position: inside;
    }

Quando aplico o float em um elemento dentro de outro, não conta que esse elemento está dentro do outro. Para sesolver, usamos o clear antes do fechamento do elemento que possui a flutuação:

    <header>
        <div class="logo">
            <h2>Logomarca</h2>
        </div>

        <nav>
            <ul>
                <li><a href="#">Home</a></li>
                <li><a href="#">Sobre</a></li>
                <li><a href="#">Contato</a></li>
            </ul>
        </nav>
        <div style="clear:both;"></div>
    </header>

Exemplo 2:

html:

    <div class="box">
        <div class="content"></div>
        <div class="content"></div>
        <div class="content"></div>
    <div class="clear"></div>
    </div>

css:

    .clear{clear:both;}

    .box {
        margin: 30px 0;
        background-color: blue;
        padding: 90px 0;
    }

    .content {
        float: left;
        width: 33.3%;
        height: 100px;
        background: red;
    }

Display flex (Modo mais moderno de alinhar um ao lado do outro - Pode ser melhor que o float):

O display flex ajusta a altura também

    .container {
        margin: 0 auto;
        max-width: 1200px;
        width: 100%;
        padding: 0 2%;
        background-color: black;

        display: flex; /*Se o elemento pai tem display flez, todos os elementos filhos sempre vão ficar um do lado do outro, alinhado*/
    }

    .content {
        width: 33.3%;
        height: 400px;
        background-color: red;
    }

Pode haver um problema: Se estou usando a largura de 33.3%, só suporta até 3 elementos 1 do lado do outro. só que mesmo se eu tiver 4 elementos, o display flex mantem ainda um do lado do outro. Para resolver, usamos: flex-wrap: wrap

    .container {
        margin: 0 auto;
        max-width: 1200px;
        width: 100%;
        padding: 0 2%;
        background-color: black;

        display: flex; /*Se o elemento pai tem display flez, todos os elementos filhos sempre vão ficar um do lado do outro, alinhado*/
        flex-wrap: wrap;


    }

    .content {
        width: 33.3%;
        height: 400px;
        background-color: red;
        border: 1px solid black;
    }

Text align (Não funciona só com texto, mas tem que ter display inline-block ou inline):

    .container {
        margin: 0 auto;
        max-width: 1200px;
        width: 100%;
        padding: 0 2%;
        background-color: green;

        text-align: center;
    }

    .content {
        display: inline-block;
        width: 200px;
        height: 200px;
        background-color: red;
        border: 1px solid black;
    }

